Day-15

Problem 1- Add Two Numbers in Linked List
Problem Link- https://leetcode.com/problems/add-two-numbers/description/

Problem Statement- 
            You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, 
            and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
            You may assume the two numbers do not contain any leading zero, except the number 0 itself.

            Example 1:

            Input: l1 = [2,4,3], l2 = [5,6,4]
            Output: [7,0,8]
            Explanation: 342 + 465 = 807.

Function -

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *dummy = new ListNode();
        ListNode *temp = dummy;
        int carry=0;
        while(l1 != NULL || l2 != NULL || carry)
        {
            int sum=0;
            if(l1 != NULL)
            {
                sum += l1->val;
                l1 = l1->next;
            }
            if(l2 != NULL)
            {
                sum += l2->val;
                l2 = l2->next;
            }
            sum += carry;
            carry = sum /10;
            ListNode *n = new ListNode(sum%10);
            temp->next = n;
            temp = temp->next;
        }
        return dummy->next;
    }
};


Problem- Largest Odd Number in String
Problem Link- https://leetcode.com/problems/largest-odd-number-in-string/description/

Problem Statement- 
            You are given a string num, representing a large integer. Return the largest-valued odd integer 
            (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.
            A substring is a contiguous sequence of characters within a string.

            Example 1:

            Input: num = "52"
            Output: "5"
            Explanation: The only non-empty substrings are "5", "2", and "52". "5" is the only odd number.

            Example 2:

            Input: num = "4206"
            Output: ""
            Explanation: There are no odd numbers in "4206".

            Example 3:

            Input: num = "35427"
            Output: "35427"
            Explanation: "35427" is already an odd number.

Function-

class Solution {
public:
    string largestOddNumber(string num) {
        int n = num.size();
        for(int i=n-1;i>=0;i--)
        {
            if((num[i]-'0')%2 !=0) return num.substr(0,i+1);
        }
        return "";
    }
};
