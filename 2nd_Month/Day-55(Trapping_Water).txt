Day- 55

Problem - Trapping Rain Water

Problem Link - https://practice.geeksforgeeks.org/problems/trapping-rain-water-1587115621/1?page=1&difficulty=Medium&sprint=a663236c31453b969852f9ea22507634&sortBy=submissions

Problem Statement - 
Given an array arr[] of N non-negative integers representing the height of blocks. If width of each block is 1, 
compute how much water can be trapped between the blocks during the rainy season. 
 

Example 1:

Input:
N = 6
arr[] = {3,0,0,2,0,4}
Output:
10
Explanation: 

Example 2:

Input:
N = 4
arr[] = {7,4,0,9}
Output:
10
Explanation:
Water trapped by above 
block of height 4 is 3 units and above 
block of height 0 is 7 units. So, the 
total unit of water trapped is 10 units.

Function - 

//{ Driver Code Starts
#include<bits/stdc++.h>

using namespace std;


// } Driver Code Ends
class Solution{

    // Function to find the trapped water between the blocks.
    public:
    long long trappingWater(int arr[], int n){
        // code here
           int l = 0, r = n-1 ;
        int left = arr[l++], right = arr[r--] ;
        long long ans = 0 ;
        while(l<=r) {
            if(left<=right) {
                while(arr[l]<left) {
                    ans += left-arr[l++] ;
                }
                left = arr[l++] ;
            }
            else {
                while(arr[r]<right) {
                    ans += right-arr[r--] ;
                }
                right = arr[r--] ;
            }
        }
        //
        return ans ;
    }
};

//{ Driver Code Starts.

int main(){
    
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        
        int a[n];
        
        //adding elements to the array
        for(int i =0;i<n;i++){
            cin >> a[i];            
        }
        Solution obj;
        //calling trappingWater() function
        cout << obj.trappingWater(a, n) << endl;
        
    }
    
    return 0;
}
// } Driver Code Ends